import React, { useEffect } from "react";
import { Form, Input, Button, Select, message } from "antd";
import { userService } from "../../service/userService";
import { useDispatch, useSelector } from "react-redux";
import { setInfoUserAction } from "../../stores/user";
import { localStorageUtil, keysLocalStorage } from "../../util/localStorage";

const { Option } = Select;

const UserInfoPage = () => {
  const [form] = Form.useForm();
  const dispatch = useDispatch();
  const infoUser = useSelector((state) => state.userSlice.infoUser);

  // ‚úÖ L·∫•y d·ªØ li·ªáu user khi v√†o trang
  const fetchUserInfo = async () => {
    try {
      const res = await userService.getInfoUser();
      const userData = res?.data?.content;
      if (userData) {
        form.setFieldsValue(userData);
        dispatch(setInfoUserAction(userData));
        localStorageUtil.set(keysLocalStorage.INFO_USER, userData);
      }
    } catch (err) {
      console.error("‚ùå Get info error:", err);
      message.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng");
    }
  };

  useEffect(() => {
    fetchUserInfo();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // ‚úÖ Submit c·∫≠p nh·∫≠t user
  const onFinish = async (values) => {
    try {
      const payload = {
        taiKhoan: values.taiKhoan?.trim(),
        matKhau: values.matKhau,
        email: values.email?.trim(),
        soDT: values.soDT?.trim(),
        hoTen: values.hoTen?.trim(),
        maNhom: "GP01",
        maLoaiNguoiDung: values.maLoaiNguoiDung || "KhachHang",
      };

      console.log("üì§ Payload update:", payload);

      await userService.upDateInfoUser(payload);

      // ‚úÖ G·ªçi l·∫°i getInfoUser ƒë·ªÉ l·∫•y b·∫£n m·ªõi nh·∫•t
      const res = await userService.getInfoUser();
      const userData = res?.data?.content;
      dispatch(setInfoUserAction(userData));
      localStorageUtil.set(keysLocalStorage.INFO_USER, userData);

      message.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
    } catch (error) {
      console.error("‚ùå Update error:", error);
      message.error(error?.response?.data?.content || "C·∫≠p nh·∫≠t th·∫•t b·∫°i");
    }
  };

  return (
    <div className="max-w-xl mx-auto bg-white shadow-md rounded-xl p-6 mt-6">
      <h1 className="text-2xl font-semibold mb-4 text-center">
        C·∫≠p nh·∫≠t th√¥ng tin
      </h1>

      <Form
        form={form}
        layout="vertical"
        onFinish={onFinish}
        initialValues={{ maLoaiNguoiDung: "KhachHang" }}
      >
        <Form.Item label="T√†i kho·∫£n" name="taiKhoan">
          <Input disabled /> {/* t√†i kho·∫£n kh√¥ng cho s·ª≠a */}
        </Form.Item>

        <Form.Item
          label="H·ªç t√™n"
          name="hoTen"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n" }]}
        >
          <Input />
        </Form.Item>

        <Form.Item
          label="Email"
          name="email"
          rules={[
            { required: true, message: "Vui l√≤ng nh·∫≠p email" },
            { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
          ]}
        >
          <Input />
        </Form.Item>

        <Form.Item
          label="S·ªë ƒëi·ªán tho·∫°i"
          name="soDT"
          rules={[
            { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" },
            { pattern: /^\d{9,11}$/, message: "S·ªë ƒëi·ªán tho·∫°i 9‚Äì11 ch·ªØ s·ªë" },
          ]}
        >
          <Input />
        </Form.Item>

        <Form.Item
          label="M·∫≠t kh·∫©u"
          name="matKhau"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" }]}
        >
          <Input.Password />
        </Form.Item>

        <Form.Item
          label="Lo·∫°i ng∆∞·ªùi d√πng"
          name="maLoaiNguoiDung"
          rules={[{ required: true, message: "Vui l√≤ng ch·ªçn lo·∫°i ng∆∞·ªùi d√πng" }]}
        >
          <Select>
            <Option value="KhachHang">Kh√°ch h√†ng</Option>
            <Option value="QuanTri">Qu·∫£n tr·ªã</Option>
          </Select>
        </Form.Item>

        <Button type="primary" htmlType="submit" className="w-full mt-2">
          C·∫≠p nh·∫≠t
        </Button>
      </Form>
    </div>
  );
};

export default UserInfoPage;
